// optimized
public class Solution {
    public int[] TwoSum(int[] nums, int target) {
        
        if(nums.Length <= 0) 
        {
            return null;
        }
        
        Hashtable table = new Hashtable();
        table[nums[0]] =  0;
        for (int i = 1; i < nums.Length; i++)
        {
            int complement = target - nums[i];

            if (table.Contains(complement))
            {
                return new int[2]{(int) table[complement],i};
            }

            var first = target - complement;
            if (!table.Contains(first))
            {
                table[first] =  i;
            }
        }

        return null;
    }
}

// brute force
public class Solution {
    public int[] TwoSum(int[] nums, int target) {
        int first = 0;
        int second = 0;

        if (nums.Length == 0)
        {
            return null;
        }

        for (int i = 0; i < nums.Length; i++)
        {
            int complement = target - nums[i];

            for (int j = i + 1; j < nums.Length; j++)
            {
                if (nums[i] + nums[j] == target)
                {
                    first = i;
                    second = j;
                    break;
                }  
            }
            
            if (second > 0)
            {
                break;
            }
        }

        return new int[] { first, second };
    }
}
